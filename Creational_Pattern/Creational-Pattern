There are five main creational patterns:

1️⃣ Singleton – Ensures only one instance of a class exists (e.g., Database connection).
2️⃣ Factory Method – A method that creates objects without specifying the exact class (e.g., Creating different types of notifications: Email, SMS).
3️⃣ Abstract Factory – A factory that creates other factories (e.g., UI Toolkit for Windows & Mac).
4️⃣ Builder – Step-by-step object construction (e.g., Making a Burger 🍔 with layers).
5️⃣ Prototype – Cloning an object instead of creating a new one from scratch.


✅ What is Singleton Pattern?

A Singleton ensures that only one instance of a class exists and provides a global access point to that instance.
🔥 Why Use Singleton?

    Prevents multiple instances (e.g., Database connections, Logger, Configuration Manager).
    Saves resources by reusing a single instance.
    Provides controlled access to a shared resource.

🏗 How Singleton Works?

1️⃣ Restrict Object Creation – Ensure only one instance is created.
2️⃣ Store the Instance – Keep a reference so future calls return the same object.
3️⃣ Provide Global Access – Any part of the code can access this instance.


✅ What is Factory Pattern?

The Factory Pattern is a creational design pattern that provides an interface for creating objects in a superclass, 
but allows subclasses to alter the type of objects that will be created.
✅ Encapsulates object creation logic
✅ Easy to maintain and modify

The factory method is typically a @staticmethod or @classmethod inside the factory class. 
It decides which object to return based on the input parameters.


🚀 Conclusion

    Factories decouple object creation from usage.
    Different factory implementations serve different needs.
    Use dynamic registration when working with scalable applications.
    The Factory Method Pattern is best suited for large applications with subclassing.


✅ What is Abstract Factory?

The Abstract Factory is a creational design pattern that provides an interface for creating families of related or dependent objects without specifying their concrete classes. 
It is like a "factory of factories."

🔥 Real World Example:
Think of a furniture store. You have multiple product categories (chairs, tables, sofas), 
and each type may have different designs for different regions (modern, classical). 
The abstract factory will give you a set of methods to create these related objects, but you don’t need to know how they are created internally.


✅ What is Builder Pattern?

The Builder Pattern is a creational design pattern used to construct complex objects step by step. 
Instead of having a large constructor with multiple parameters, the Builder pattern provides a flexible and readable way to create objects.

🔥 Why Use Builder Pattern?

    Improves Readability – No need for large constructors with too many parameters.
    Step-by-Step Construction – Can create objects with optional and default values easily.
    Immutability – Helps in making objects immutable after creation.
    Prevents Telescoping Constructor – Avoids multiple overloaded constructors


✅ What is Prototype Pattern?

The Prototype Pattern is used to create new objects by cloning an existing object, instead of building from scratch. This helps when object creation is expensive.
🔥 Why Use Prototype Pattern?

✔ Faster object creation – Avoids costly instantiation.
✔ Useful for large or complex objects – Cloning is quicker than constructing.
✔ Reduces code duplication – You don’t need to repeat initialization logic.